# Source other files

if [ -f ~/git-completion.bash ]; then
  . ~/git-completion.bash
fi

if [ -f ~/.bash_secret ]; then
  . ~/.bash_secret
fi

#  SETUP CONSTANTS
#  Bunch-o-predefined colors.  Makes reading code easier than escape
#  sequences.

# Reset
col_off="\[\033[0m\]"       # Text Reset

# Regular Colors
black="\[\033[0;30m\]"        # Black
red="\[\033[0;31m\]"          # Red
green="\[\033[0;32m\]"        # Green
yellow="\[\033[0;33m\]"       # Yellow
blue="\[\033[0;34m\]"         # Blue
purple="\[\033[0;35m\]"       # Purple
cyan="\[\033[0;36m\]"         # Cyan
white="\[\033[0;37m\]"        # White

# Bold
bblack="\[\033[1;30m\]"       # Black
bred="\[\033[1;31m\]"         # Red
bgreen="\[\033[1;32m\]"       # Green
byellow="\[\033[1;33m\]"      # Yellow
bblue="\[\033[1;34m\]"        # Blue
bpurple="\[\033[1;35m\]"      # Purple
bcyan="\[\033[1;36m\]"        # Cyan
bwhite="\[\033[1;37m\]"       # White

# Underline
ublack="\[\033[4;30m\]"       # Black
ured="\[\033[4;31m\]"         # Red
ugreen="\[\033[4;32m\]"       # Green
uyellow="\[\033[4;33m\]"      # Yellow
ublue="\[\033[4;34m\]"        # Blue
upurple="\[\033[4;35m\]"      # Purple
ucyan="\[\033[4;36m\]"        # Cyan
uwhite="\[\033[4;37m\]"       # White

# Background
on_black="\[\033[40m\]"       # Black
on_red="\[\033[41m\]"         # Red
on_green="\[\033[42m\]"       # Green
on_yellow="\[\033[43m\]"      # Yellow
on_blue="\[\033[44m\]"        # Blue
on_purple="\[\033[45m\]"      # Purple
on_cyan="\[\033[46m\]"        # Cyan
on_white="\[\033[47m\]"       # White

# High Intensty
iblack="\[\033[0;90m\]"       # Black
ired="\[\033[0;91m\]"         # Red
igreen="\[\033[0;92m\]"       # Green
iyellow="\[\033[0;93m\]"      # Yellow
iblue="\[\033[0;94m\]"        # Blue
ipurple="\[\033[0;95m\]"      # Purple
icyan="\[\033[0;96m\]"        # Cyan
iwhite="\[\033[0;97m\]"       # White

# Bold High Intensty
biblack="\[\033[1;90m\]"      # Black
bired="\[\033[1;91m\]"        # Red
bigreen="\[\033[1;92m\]"      # Green
biyellow="\[\033[1;93m\]"     # Yellow
biblue="\[\033[1;94m\]"       # Blue
bipurple="\[\033[1;95m\]"     # Purple
bicyan="\[\033[1;96m\]"       # Cyan
biwhite="\[\033[1;97m\]"      # White

# High Intensty backgrounds
on_iblack="\[\033[0;100m\]"   # Black
on_ired="\[\033[0;101m\]"     # Red
on_igreen="\[\033[0;102m\]"   # Green
on_iyellow="\[\033[0;103m\]"  # Yellow
on_iblue="\[\033[0;104m\]"    # Blue
on_ipurple="\[\033[10;95m\]"  # Purple
on_icyan="\[\033[0;106m\]"    # Cyan
on_iwhite="\[\033[0;107m\]"   # White

# Find out what we're running on, for path differences etc
opsys=$( uname )

previousstatus=""

function get_previous_status {
  status=$?
  if [ $status -eq 0 ]; then
    previousstatus="$igreen\342\234\223 "
  else
    previousstatus="$ired\342\234\227-$status "
  fi
}

gitstatus=""
gitbranch=""
gitprompt=""

# get the status of whether we're a git repository
function get_git_status {
  git status 2> /dev/null
}

# return the current branch name
function get_git_branch_name {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

# find the root of the current git tree
function get_git_root {
  git rev-parse --show-toplevel 2> /dev/null
}

# return the count of all added but uncommitted or modified files in the current
# repository
function get_git_staged_count {
  # basic diff gives modified files, --cached gives newly added files
  echo $((
    $( git diff --name-only | wc -l | sed -e 's/^[[:space:]]*//' ) + 
    $( git diff --cached --name-only | wc -l | sed -e 's/^[[:space:]]*//' )
  ))
}

# return the count of all untracked files in the current repository
function get_git_unstaged_count {
  git ls-files $( get_git_root ) --exclude-standard --others | wc -l | sed -e 's/^[[:space:]]*//'
}

# return the number of current entries on the stash list
function get_git_stash_count {
  git stash list | wc -l | sed -e 's/^[[:space:]]*//'
}

# set a basic prompt showing the current branch. Yellow for clean master, blue
# for any other clean branch, red for any unclean branch
function set_git_basic_prompt {
  cleancheck="^.*working directory clean.*$"
  mergecheck="^.*All conflicts fixed but you are still merging.*$"
  if [[ "$gitstatus" =~ $cleancheck && ! "$gitstatus" =~ $mergecheck ]]; then
    if [ "$gitbranch" = "master" ]; then
      gitprompt+=$iyellow
    else
      gitprompt+=$icyan
    fi
  else
    gitprompt+=$ired
  fi

  gitprompt+=$gitbranch
}

#Â set notifications for the number of commits ahead or behind master we are,
#or whether we've diverged
function set_git_origin_notification {
  aheadcheck="^.*Your branch is ahead of '.*' by ([0-9]+) commits?.*$"
  behindcheck="^.*Your branch is behind '.*' by ([0-9]+) commits?.*$"
  divergedcheck="^.*and have ([0-9]+) and ([0-9]+) different commits? each, respectively.*$"

  if [[ "$gitstatus" =~ $aheadcheck ]]; then
    gitprompt+="|\342\206\221${BASH_REMATCH[1]}"
  elif [[ "$gitstatus" =~ $behindcheck ]]; then
    gitprompt+="|\342\206\223${BASH_REMATCH[1]}"
  elif [[ "$gitstatus" =~ $divergedcheck ]]; then
    gitprompt+="|\342\206\221${BASH_REMATCH[1]}\342\206\223${BASH_REMATCH[2]}"
  fi
}

# set notifications for the number of staged but uncommitted and unstaged
# changes there are
function set_git_changes_notification {
  stagedcount=$( get_git_staged_count )
  if [ $stagedcount -gt 0 ]; then
    gitprompt+="|\342\227\217$stagedcount"
  fi

  unstagedcount=$( get_git_unstaged_count )
  if [ $unstagedcount -gt 0 ]; then
    gitprompt+="|+$unstagedcount"
  fi
}

# set notification for the number of commits on the stash currently
function set_git_stash_notification {
  stashcount=$( get_git_stash_count )
  if [ $stashcount -gt 0 ]; then
    gitprompt+="|\342\232\221$stashcount"
  fi
}

# set a number of variables in the prompt based on the status of the current
# git repository
function set_git_prompt {
  gitprompt=":"
  set_git_basic_prompt
  set_git_origin_notification
  set_git_changes_notification
  set_git_stash_notification
}

PROMPT_COMMAND=prompt_command

function prompt_command {
  get_previous_status
  timestamp=$(date +"%H:%M:%S")
  # are we an interactive shell?
  if [ "$PS1" ]; then
    # Root gets a #, all other users get a $
    if [ $UID == 0 ]; then
      endchar="$timestamp #"
      promptcolour=$red
    else
      endchar="$timestamp \$"
      if [ -f ~/.shared ]; then
	promptcolour=$cyan
      else
	promptcolour=$green
      fi
    fi

    # Linux terms really don't deal with the colouration stuff very well
    if [ $TERM == "linux" ]; then
      export PS1="\u@\h \w\n$endchar "
    else
      gitstatus=$( get_git_status )
      if [ -n "$gitstatus" ]; then
	gitbranch=$( get_git_branch_name )
	# If we have a status, but no branch, we're the initial commit
	if [ -z "$gitbranch" ]; then
	  gitbranch="<init>"
	fi
	set_git_prompt
      else
	# Clear the prompt when we're not in a repository
	gitbranch=""
	gitprompt=""
      fi

      # Set the xterm title if it's usable by the terminal
      if [ $TERM == "xterm" -o $TERM == "xterm-color" ]; then
        if [ -n "$gitbranch" ]; then
          title="\[\e]0;\h \w:$gitbranch\a\]"
        else
          title="\[\e]0;\h \w\a\]"
        fi
      else
        title=""
      fi

      export PS1="$title$previousstatus$promptcolour\u@\h $yellow\w$gitprompt\n$white$endchar "
    fi
  fi
}

# Aliases Go Here
alias gg="git log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr)%Creset' --abbrev-commit --date=relative"
alias nslookup="nslookup -sil"

if [ $opsys == 'Linux' ]; then
  alias ls="ls -ap --color"
else
  # Assume BSD/Unix style
  alias ls="ls -apG"
fi

ssh-add &>/dev/null

alias ll="ls -l"
alias reload="source ~/.bashrc"

export EDITOR="vim"

if [ -d "$HOME/.rvm" ]; then
  PATH=$PATH:$HOME/.rvm/bin
fi

if [ -d "$HOME/bin" ]; then
  PATH=$PATH:$HOME/bin
fi

BASE_JAVA_OPTS=""

# If we're at the beeb we need proxies
if [ $opsys == 'Darwin' ]; then
  alias mltail="tail -f ~/Library/Application\ Support/MarkLogic/Data/Logs/ErrorLog.txt"
  locationfile=/var/tmp/location
  location=$(/bin/cat ${locationfile} 2>/dev/null)

  if [ "$location" == "BBC On Network" -o "$location" == "BBC On VPN" ]; then
    export http_proxy="http://www-cache.reith.bbc.co.uk:80"
    export https_proxy=$http_proxy
    export HTTP_PROXY=$http_proxy
    export HTTPS_PROXY=$http_proxy
    export no_proxy="localhost,127.0.0.1,sandbox,sandbox.bbc.co.uk"
    export NO_PROXY=$no_proxy

    export JAVA_OPTS="$BASE_JAVA_OPTS \
     -Dhttp.proxyHost=www-cache.reith.bbc.co.uk \
     -Dhttp.proxyPort=80 \
     -Dhttps.proxyHost=www-cache.reith.bbc.co.uk \
     -Dhttps.proxyPort=80 \
     -Dhttp.nonProxyHosts=localhost|national.core.bbc.co.uk|sandbox|sandbox.bbc.co.uk|*.sandbox.dev.bbc.co.uk"
  else
    unset http_proxy
    unset https_proxy
    unset no_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset NO_PROXY

    export JAVA_OPTS="$BASE_JAVA_OPTS"
  fi
fi
