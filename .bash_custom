# Source other files

if [ -f ~/git-completion.bash ]; then
  . ~/git-completion.bash
fi

if [ -f ~/pass-completion.bash ]; then
 . ~/pass-completion.bash
fi

if [ -f ~/.bash_secret ]; then
  . ~/.bash_secret
fi

#  SETUP CONSTANTS
#  Bunch-o-predefined colours and symbols.
#  Makes reading code easier than escape sequences.

# Overlay 'tput' so that non-GNU behaves as much like GNU as possible
# This is a subset of a fuller gist
# https://gist.github.com/rawiriblundell/83ed9408a7e3032c780ed56b7c9026f2
# For performance we only implement if 'tput ce' (a harmless test) works
if tput ce 2>/dev/null; then
  tput() {
    ctput-null() { command tput "${@}" 2>/dev/null; }
    ctput() { command tput "${@}"; }
    case "${1}" in
      (bold)          ctput-null bold  || ctput md;;
      (civis)         ctput-null civis || ctput vi;;
      (cnorm)         ctput-null cnorm || ctput ve;;
      (cols)          ctput-null cols  || ctput co;;
      (dim)           ctput-null dim   || ctput mh;;
      (lines)         ctput-null lines || ctput li;;
      (setaf)
        case $(uname) in
          (FreeBSD)   ctput AF "${2}";;
          (OpenBSD)   ctput AF "${2}" 0 0;;
          (*)         ctput setaf "${2}";;
        esac
      ;;
      (setab)
        case $(uname) in
          (FreeBSD)   ctput AB "${2}";;
          (OpenBSD)   ctput AB "${2}" 0 0;;
          (*)         ctput setab "${2}";;
        esac
      ;;
      (sgr0)          ctput-null sgr0  || ctput me;;
      (*)             ctput "${@}";;
    esac
  }
fi

# Reset
reset="\[$(tput sgr0)\]"

# Regular Colors
black="\[$(tput setaf 0)\]"
red="\[$(tput setaf 1)\]"
green="\[$(tput setaf 2)\]"
yellow="\[$(tput setaf 3)\]"
blue="\[$(tput setaf 4)\]"
purple="\[$(tput setaf 5)\]"
cyan="\[$(tput setaf 6)\]"
white="\[$(tput setaf 7)\]"

# Bold
bblack="\[$(tput setaf 0)$(tput bold)\]"
bred="\[$(tput setaf 1)$(tput bold)\]"
bgreen="\[$(tput setaf 2)$(tput bold)\]"
byellow="\[$(tput setaf 3)$(tput bold)\]"
bblue="\[$(tput setaf 4)$(tput bold)\]"
bpurple="\[$(tput setaf 5)$(tput bold)\]"
bcyan="\[$(tput setaf 6)$(tput bold)\]"
bwhite="\[$(tput setaf 7)$(tput bold)\]"

# Underline
ublack="\[$(tput setaf 0)$(tput smul)\]"
ured="\[$(tput setaf 1)$(tput smul)\]"
ugreen="\[$(tput setaf 2)$(tput smul)\]"
uyellow="\[$(tput setaf 3)$(tput smul)\]"
ublue="\[$(tput setaf 4)$(tput smul)\]"
upurple="\[$(tput setaf 5)$(tput smul)\]"
ucyan="\[$(tput setaf 6)$(tput smul)\]"
uwhite="\[$(tput setaf 7)$(tput smul)\]"

# Background
bg_black="\[$(tput setab 0)\]"
bg_red="\[$(tput setab 1)\]"
bg_green="\[$(tput setab 2)\]"
bg_yellow="\[$(tput setab 3)\]"
bg_blue="\[$(tput setab 4)\]"
bg_purple="\[$(tput setab 5)\]"
bg_cyan="\[$(tput setab 6)\]"
bg_white="\[$(tput setab 7)\]"

if [ "$(tput colors)" -ge "16" ]; then
  # Bright
  iblack="\[$(tput setaf 8)\]"
  ired="\[$(tput setaf 9)\]"
  igreen="\[$(tput setaf 10)\]"
  iyellow="\[$(tput setaf 11)\]"
  iblue="\[$(tput setaf 12)\]"
  ipurple="\[$(tput setaf 13)\]"
  icyan="\[$(tput setaf 14)\]"
  iwhite="\[$(tput setaf 15)\]"

  # Bold Bright
  biblack="\[$(tput setaf 8)$(tput bold)\]"
  bired="\[$(tput setaf 9)$(tput bold)\]"
  bigreen="\[$(tput setaf 10)$(tput bold)\]"
  biyellow="\[$(tput setaf 11)$(tput bold)\]"
  biblue="\[$(tput setaf 12)$(tput bold)\]"
  bipurple="\[$(tput setaf 13)$(tput bold)\]"
  bicyan="\[$(tput setaf 14)$(tput bold)\]"
  biwhite="\[$(tput setaf 15)$(tput bold)\]"

  # Bright backgrounds
  bg_iblack="\[$(tput setab 8)\]"
  bg_ired="\[$(tput setab 9)\]"
  bg_igreen="\[$(tput setab 10)\]"
  bg_iyellow="\[$(tput setab 11)\]"
  bg_iblue="\[$(tput setab 12)\]"
  bg_ipurple="\[$(tput setab 13)\]"
  bg_icyan="\[$(tput setab 14)\]"
  bg_iwhite="\[$(tput setab 15)\]"
else
  iblack=${black}
  ired=${red}
  igreen=${green}
  iyellow=${yellow}
  iblue=${blue}
  ipurple=${purple}
  icyan=${cyan}
  iwhite=${white}

  biblack=${bblack}
  bired=${bred}
  bigreen=${bgreen}
  biyellow=${byellow}
  biblue=${bblue}
  bipurple=${bpurple}
  bicyan=${bcyan}
  biwhite=${bwhite}

  bg_iblack=${bg_black}
  bg_ired=${bg_red}
  bg_igreen=${bg_green}
  bg_iyellow=${bg_yellow}
  bg_iblue=${bg_blue}
  bg_ipurple=${bg_purple}
  bg_icyan=${bg_cyan}
  bg_iwhite=${bg_white}
fi

tick="\342\234\223"
cross="\342\234\227"
uparr="\342\206\221"
downarr="\342\206\223"
bullet="\342\227\217"
flag="\342\232\221"

# Find out what we're running on, for path differences etc
opsys=$( uname )

export UID
export GID=$( id -g )

previousstatus=""

function get_previous_status {
  status=$?
  if [ $status -eq 0 ]; then
    previousstatus="${igreen}${tick} "
  else
    previousstatus="${ired}${cross}-${status} "
  fi
}

gitstatus=""
gitbranch=""
gitprompt=""

# get the status of whether we're a git repository
function get_git_status {
  git status 2> /dev/null
}

# return the current branch name
function get_git_branch_name {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

# find the root of the current git tree
function get_git_root {
  git rev-parse --show-toplevel 2> /dev/null
}

# return the count of all added but uncommitted or modified files in the current
# repository
function get_git_staged_count {
  # basic diff gives modified files, --cached gives newly added files
  echo $((
    $( git diff --name-only | wc -l | sed -e 's/^[[:space:]]*//' ) + 
    $( git diff --cached --name-only | wc -l | sed -e 's/^[[:space:]]*//' )
  ))
}

# return the count of all untracked files in the current repository
function get_git_unstaged_count {
  git ls-files $( get_git_root ) --exclude-standard --others | wc -l | sed -e 's/^[[:space:]]*//'
}

# return the number of current entries on the stash list
function get_git_stash_count {
  git stash list | wc -l | sed -e 's/^[[:space:]]*//'
}

# set a basic prompt showing the current branch. Yellow for clean master, blue
# for any other clean branch, red for any unclean branch
function set_git_basic_prompt {
  cleancheck="^.*working (directory|tree) clean.*$"
  mergecheck="^.*All conflicts fixed but you are still merging.*$"
  if [[ "${gitstatus}" =~ ${cleancheck} && ! "${gitstatus}" =~ ${mergecheck} ]]; then
    if [ "${gitbranch}" = "master" ]; then
      gitprompt+=${iyellow}
    else
      gitprompt+=${icyan}
    fi
  else
    gitprompt+=${ired}
  fi

  gitprompt+=${gitbranch}
}

#Â set notifications for the number of commits ahead or behind master we are,
#or whether we've diverged
function set_git_origin_notification {
  aheadcheck="^.*Your branch is ahead of '.*' by ([0-9]+) commits?.*$"
  behindcheck="^.*Your branch is behind '.*' by ([0-9]+) commits?.*$"
  divergedcheck="^.*and have ([0-9]+) and ([0-9]+) different commits? each, respectively.*$"

  if [[ "${gitstatus}" =~ ${aheadcheck} ]]; then
    gitprompt+="|${uparr}${BASH_REMATCH[1]}"
  elif [[ "${gitstatus}" =~ ${behindcheck} ]]; then
    gitprompt+="|${downarr}${BASH_REMATCH[1]}"
  elif [[ "${gitstatus}" =~ ${divergedcheck} ]]; then
    gitprompt+="|${uparr}${BASH_REMATCH[1]}${downarr}${BASH_REMATCH[2]}"
  fi
}

# set notifications for the number of staged but uncommitted and unstaged
# changes there are
function set_git_changes_notification {
  stagedcount=$( get_git_staged_count )
  if [ "${stagedcount}" -gt "0" ]; then
    gitprompt+="|${bullet}${stagedcount}"
  fi

  unstagedcount=$( get_git_unstaged_count )
  if [ "${unstagedcount}" -gt "0" ]; then
    gitprompt+="|+${unstagedcount}"
  fi
}

# set notification for the number of commits on the stash currently
function set_git_stash_notification {
  stashcount=$( get_git_stash_count )
  if [ "${stashcount}" -gt "0" ]; then
    gitprompt+="|${flag}${stashcount}"
  fi
}

# set a number of variables in the prompt based on the status of the current
# git repository
function set_git_prompt {
  gitprompt=":"
  set_git_basic_prompt
  set_git_origin_notification
  set_git_changes_notification
  set_git_stash_notification
}

PROMPT_COMMAND=prompt_command

function prompt_command {
  get_previous_status
  # are we an interactive shell?
  if [ "${PS1}" ]; then
    # Root gets a #, all other users get a $
    if [ "${UID}" -eq "0" ]; then
      endchar="\t #"
      promptcolour=${red}
    else
      endchar="\t \$"
      if [ -f ~/.shared ]; then
	promptcolour=${cyan}
      else
	promptcolour=${green}
      fi
    fi

    # Linux terms really don't deal with the colouration stuff very well
    if [ "${TERM}" == "{linux}" ]; then
      export PS1="\u@\h \w\n${endchar} "
    else
      gitstatus=$( get_git_status )
      if [ -n "${gitstatus}" ]; then
	gitbranch=$( get_git_branch_name )
	# If we have a status, but no branch, we're the initial commit
	if [ -z "${gitbranch}" ]; then
	  gitbranch="<init>"
	fi
	set_git_prompt
      else
	# Clear the prompt when we're not in a repository
	gitbranch=""
	gitprompt=""
      fi

      # Set the xterm title if it's usable by the terminal
      if [ "${TERM}" == "xterm" -o "${TERM}" == "xterm-color" -o "${TERM}" == "xterm-256color" ]; then
        if [ -n "${gitbranch}" ]; then
          title="\[\e]0;\h \w:${gitbranch}\a\]"
        else
          title="\[\e]0;\h \w\a\]"
        fi
      else
        title=""
      fi

      export PS1="${title}${previousstatus}${promptcolour}\u@\h ${yellow}\w${gitprompt}\n${reset}${endchar} "
    fi
  fi
}

ssh-add &>/dev/null

# Aliases Go Here
alias nslookup="nslookup -sil"

if [ $opsys == 'Linux' ]; then
  alias ls="ls -ap --color"
else
  # Assume BSD/Unix style
  alias ls="ls -apG"
fi

alias ll="ls -l"
alias reload="source ~/.bashrc"
alias boot="boot boot.lein/generate"

export EDITOR="vim"

if [ -d "${HOME}/bin" ]; then
  export PATH=${PATH}:${HOME}/bin
fi

if [ -d "${HOME}/.rbenv" ]; then
  eval "$(rbenv init -)"
fi

if [ -d "${HOME}/.pyenv" ]; then
  eval "$(pyenv init -)"
fi

BASE_JAVA_OPTS=""

# If we're at the beeb we need proxies
if [ $opsys == 'Darwin' ]; then
  alias mlvm="~/git/mlvm/mlvm.sh"
  alias mltail="tail -f ~/Library/Application\ Support/MarkLogic/Data/Logs/ErrorLog.txt"
 
  export PM_HOME="/Users/meyerd06/git/programme-metadata"
  export NITRO_HOME="/Users/meyerd06/git/nitro/nitro-xquery/src/main"
  export HOMEBREW_FORCE_BREWED_CURL="1"
  export COSMOS_CERT="/Users/meyerd06/certs/meyerd06_dev.pem"
  export GROOVY_HOME="/usr/local/opt/groovy/libexec"
  export DRONE_SERVER=https://drone.datalab.rocks

  export PYSPARK_PYTHON=${HOME}/.pyenv/versions/3.7.3/bin/python3
  export SBT_HOME=/usr/local/Cellar/sbt/1.2.8/
  export SPARK_HOME=/usr/local/Cellar/apache-spark/2.4.3/libexec
  export SCALA_HOME=/usr/local/Cellar/scala@2.11/2.11.12/
  export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_202.jdk/Contents/Home
  export PATH=${PATH}:${SPARK_HOME}

  eval "$(cosmos completion)"

  export PATH=/usr/local/opt/curl-openssl/bin:${PATH}
  export PATH=${PATH}:${HOME}/go/bin:${PM_HOME}/cosmos-utils/bin

  location=$(/usr/sbin/scselect | /usr/bin/grep "^\W\*" | /usr/bin/awk -F'[()]' '{ print $2 }')

  if [ "${location}" == "BBC Off Network" ]; then
    unset http_proxy
    unset https_proxy
    unset no_proxy
    unset HTTP_PROXY
    unset HTTPS_PROXY
    unset NO_PROXY

    if [ $(which npm) ]; then
      npm config delete proxy
      npm config delete https-proxy
    fi

    export JAVA_OPTS="${BASE_JAVA_OPTS}"
  else
    export http_proxy="http://www-cache.reith.bbc.co.uk:80"
    export https_proxy=${http_proxy}
    export HTTP_PROXY=${http_proxy}
    export HTTPS_PROXY=${http_proxy}
    export no_proxy="localhost,127.0.0.1,sandbox,sandbox.bbc.co.uk,pal.sandbox.dev.bbc.co.uk"
    export NO_PROXY=${no_proxy}

    if [ $(which npm) ]; then
      npm config set proxy ${http_proxy}
      npm config set https-proxy ${http_proxy}
    fi

    export JAVA_TOOL_OPTIONS="-DsocksProxyHost -DsocksProxyPort"
    export JAVA_OPTS="$BASE_JAVA_OPTS \
     -Dhttp.proxyHost=www-cache.reith.bbc.co.uk \
     -Dhttp.proxyPort=80 \
     -Dhttps.proxyHost=www-cache.reith.bbc.co.uk \
     -Dhttps.proxyPort=80 \
     -Dhttp.nonProxyHosts=localhost|national.core.bbc.co.uk|sandbox|sandbox.bbc.co.uk|*.sandbox.dev.bbc.co.uk"
  fi

  export MAVEN_OPTS="-Xms256m -Xmx512m \
    -Denv.trustStore=${HOME}/certs/jssecacerts \
    -Denv.keyStore=${HOME}/certs/meyerd06_dev.p12 \
    -Denv.keyStoreType=PKCS12 \
    -Denv.keyStorePassword=${CERT_PASSWORD}"

  export BOOT_JVM_OPTIONS="-Xmx6g \
    -Djavax.net.ssl.keyStore=${HOME}/certs/meyerd06_dev.p12 \
    -Djavax.net.ssl.keyStoreType=PKCS12 \
    -Djavax.net.ssl.keyStorePassword=${CERT_PASSWORD} \
    -XX:-OmitStackTraceInFastThrow"

  #export LEIN_JVM_OPTIONS="-Xmx6g \
  #  -Djavax.net.ssl.keyStore=${HOME}/certs/meyerd06_dev.p12 \
  #  -Djavax.net.ssl.keyStoreType=PKCS12 \
  #  -Djavax.net.ssl.keyStorePassword=${CERT_PASSWORD}"

fi
